/*
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 * All rights reserved.
 *
 * This source code is licensed under the license found in the
 * LICENSE file in the root directory of this source tree.
 */

@testable import FBSDKCoreKit

// swiftlint:disable:next swiftlint_disable_without_this_or_next
// swiftlint:disable line_length

enum TestCoreKitComponents {

  static func makeComponents(
    accessTokenExpirer: _AccessTokenExpiring = TestAccessTokenExpirer(),
    accessTokenWallet: (_AccessTokenProviding & _TokenStringProviding).Type = TestAccessTokenWallet.self,
    advertiserIDProvider: _AdvertiserIDProviding = TestAdvertiserIDProvider(),
    appEvents: _AppEventsConfiguring & _ApplicationActivating & _ApplicationLifecycleObserving & _ApplicationStateSetting & EventLogging & _SourceApplicationTracking = TestAppEvents(),
    appEventsConfigurationProvider: _AppEventsConfigurationProviding = TestAppEventsConfigurationProvider(),
    appEventsStateProvider: _AppEventsStateProviding = TestAppEventsStateProvider(),
    appEventsStateStore: _AppEventsStatePersisting = TestAppEventsStateStore(),
    appEventsUtility: _AppEventDropDetermining & _AppEventParametersExtracting & _AppEventsUtilityProtocol & _LoggingNotifying = TestAppEventsUtility(),
    atePublisherFactory: _ATEPublisherCreating = TestATEPublisherFactory(),
    authenticationTokenWallet: _AuthenticationTokenProviding.Type = TestAuthenticationTokenWallet.self,
    crashHandler: CrashHandlerProtocol = TestCrashHandler(),
    crashObserver: CrashObserving = TestCrashObserver(),
    defaultDataStore: DataPersisting = TestDataStore(),
    deviceInformationProvider: _DeviceInformationProviding = TestDeviceInformationProvider(),
    dialogConfigurationMapBuilder: _DialogConfigurationMapBuilding = TestDialogConfigurationMapBuilder(),
    errorConfigurationProvider: _ErrorConfigurationProviding = TestErrorConfigurationProvider(),
    errorFactory: ErrorCreating = TestErrorFactory(),
    errorReporter: ErrorReporting = TestErrorReporter(),
    eventDeactivationManager: _AppEventsParameterProcessing & _EventsProcessing = TestAppEventsParameterProcessor(),
    eventLogger: EventLogging = TestEventLogger(),
    featureChecker: FeatureChecking & _FeatureDisabling = TestFeatureManager(),
    gateKeeperManager: _GateKeeperManaging.Type = TestGateKeeperManager.self,
    getApplicationActivationNotifier: @escaping () -> Any = { UninhabitedObject.shared },
    graphRequestConnectionFactory: GraphRequestConnectionFactoryProtocol = TestGraphRequestConnectionFactory(),
    graphRequestFactory: GraphRequestFactoryProtocol = TestGraphRequestFactory(),
    impressionLoggerFactory: _ImpressionLoggerFactoryProtocol = TestImpressionLoggerFactory(),
    infoDictionaryProvider: InfoDictionaryProviding = TestBundle(),
    internalUtility: InternalUtilityProtocol = TestInternalUtility(),
    logger: Logging.Type = TestLogger.self,
    loggerFactory: _LoggerCreating = TestLoggerFactory(),
    macCatalystDeterminator: _MacCatalystDetermining = TestMacCatalystDeterminator(),
    notificationCenter: NotificationDelivering & _NotificationPosting = TestNotificationCenter(),
    operatingSystemVersionComparer: _OperatingSystemVersionComparing = TestProcessInfo(),
    paymentObserver: _PaymentObserving = TestPaymentObserver(),
    piggybackManager: _GraphRequestPiggybackManaging = TestGraphRequestPiggybackManager(),
    restrictiveDataFilterManager: _AppEventsParameterProcessing & _EventsProcessing = TestAppEventsParameterProcessor(),
    serverConfigurationProvider: _ServerConfigurationProviding = TestServerConfigurationProvider(),
    settings: SettingsLogging & SettingsProtocol = TestSettings(),
    timeSpentRecorder: _SourceApplicationTracking & _TimeSpentRecording = TestTimeSpentRecorder(),
    tokenCache: TokenCaching = TestTokenCache(),
    urlSessionProxyFactory: _URLSessionProxyProviding = TestURLSessionProxyFactory(),
    userDataStore: _UserDataPersisting = TestUserDataStore(),
    capiReporter: CAPIReporter = TestCAPIReporter(),

    // Non-tvOS
    aemNetworker: AEMNetworking? = TestAEMNetworker(),
    aemReporter: _AEMReporterProtocol.Type = TestAEMReporter.self,
    appEventParametersExtractor: _AppEventParametersExtracting = TestAppEventParametersExtractor(),
    appEventsDropDeterminer: _AppEventDropDetermining = TestAppEventsDropDeterminer(),
    appLinkEventPoster: _AppLinkEventPosting = TestAppLinkEventPoster(),
    appLinkFactory: _AppLinkCreating = TestAppLinkFactory(),
    appLinkResolver: AppLinkResolving = TestAppLinkResolver(),
    appLinkTargetFactory: _AppLinkTargetCreating = TestAppLinkTargetFactory(),
    appLinkURLFactory: _AppLinkURLCreating = TestAppLinkURLFactory(),
    backgroundEventLogger: BackgroundEventLogging = TestBackgroundEventLogger(),
    codelessIndexer: _CodelessIndexing.Type = TestCodelessEvents.self,
    dataExtractor: _FileDataExtracting.Type = TestFileDataExtractor.self,
    featureExtractor: _FeatureExtracting.Type = TestFeatureExtractor.self,
    fileManager: _FileManaging = TestFileManager(),
    internalURLOpener: _InternalURLOpener = TestInternalURLOpener(),
    metadataIndexer: _MetadataIndexing = TestMetadataIndexer(),
    modelManager: _EventProcessing & _IntegrityParametersProcessorProvider = TestOnDeviceMLModelManager(),
    profileSetter: ProfileProviding.Type = TestProfileProvider.self,
    rulesFromKeyProvider: _RulesFromKeyProvider = TestOnDeviceMLModelManager(),
    sessionDataTaskProvider: URLSessionProviding = TestSessionProvider(),
    skAdNetworkReporter: (SKAdNetworkReporting & _AppEventsReporter)? = TestSKAdNetworkReporter(),
    suggestedEventsIndexer: _SuggestedEventsIndexerProtocol = TestSuggestedEventsIndexer(),
    swizzler: _Swizzling.Type = TestSwizzler.self,
    urlHoster: URLHosting = TestURLHoster(),
    userIDProvider: _UserIDProviding = TestUserIDProvider(),
    webViewProvider: _WebViewProviding = TestWebViewFactory()
  ) -> CoreKitComponents {
    CoreKitComponents(
      accessTokenExpirer: accessTokenExpirer,
      accessTokenWallet: accessTokenWallet,
      advertiserIDProvider: advertiserIDProvider,
      appEvents: appEvents,
      appEventsConfigurationProvider: appEventsConfigurationProvider,
      appEventsStateProvider: appEventsStateProvider,
      appEventsStateStore: appEventsStateStore,
      appEventsUtility: appEventsUtility,
      atePublisherFactory: atePublisherFactory,
      authenticationTokenWallet: authenticationTokenWallet,
      capiReporter: capiReporter,
      crashHandler: crashHandler,
      crashObserver: crashObserver,
      defaultDataStore: defaultDataStore,
      deviceInformationProvider: deviceInformationProvider,
      dialogConfigurationMapBuilder: dialogConfigurationMapBuilder,
      errorConfigurationProvider: errorConfigurationProvider,
      errorFactory: errorFactory,
      errorReporter: errorReporter,
      eventDeactivationManager: eventDeactivationManager,
      eventLogger: eventLogger,
      featureChecker: featureChecker,
      gateKeeperManager: gateKeeperManager,
      getApplicationActivationNotifier: getApplicationActivationNotifier,
      graphRequestConnectionFactory: graphRequestConnectionFactory,
      graphRequestFactory: graphRequestFactory,
      impressionLoggerFactory: impressionLoggerFactory,
      infoDictionaryProvider: infoDictionaryProvider,
      internalUtility: internalUtility,
      logger: logger,
      loggerFactory: loggerFactory,
      macCatalystDeterminator: macCatalystDeterminator,
      notificationCenter: notificationCenter,
      operatingSystemVersionComparer: operatingSystemVersionComparer,
      paymentObserver: paymentObserver,
      piggybackManager: piggybackManager,
      restrictiveDataFilterManager: restrictiveDataFilterManager,
      serverConfigurationProvider: serverConfigurationProvider,
      settings: settings,
      timeSpentRecorder: timeSpentRecorder,
      tokenCache: tokenCache,
      urlSessionProxyFactory: urlSessionProxyFactory,
      userDataStore: userDataStore,

      // Non-tvOS
      aemNetworker: aemNetworker,
      aemReporter: aemReporter,
      appEventParametersExtractor: appEventParametersExtractor,
      appEventsDropDeterminer: appEventsDropDeterminer,
      appLinkEventPoster: appLinkEventPoster,
      appLinkFactory: appLinkFactory,
      appLinkResolver: appLinkResolver,
      appLinkTargetFactory: appLinkTargetFactory,
      appLinkURLFactory: appLinkURLFactory,
      backgroundEventLogger: backgroundEventLogger,
      codelessIndexer: codelessIndexer,
      dataExtractor: dataExtractor,
      featureExtractor: featureExtractor,
      fileManager: fileManager,
      internalURLOpener: internalURLOpener,
      metadataIndexer: metadataIndexer,
      modelManager: modelManager,
      profileSetter: profileSetter,
      rulesFromKeyProvider: rulesFromKeyProvider,
      sessionDataTaskProvider: sessionDataTaskProvider,
      skAdNetworkReporter: skAdNetworkReporter,
      suggestedEventsIndexer: suggestedEventsIndexer,
      swizzler: swizzler,
      urlHoster: urlHoster,
      userIDProvider: userIDProvider,
      webViewProvider: webViewProvider
    )
  }
}
